:javascript

    /* ----------------
       Basic layout functionality for UI.
    */

    function toggleTheme() {
        const html = document.documentElement;
        const themeIcon = document.getElementById('theme-icon');
        const currentTheme = html.getAttribute('data-bs-theme');
        
        if (currentTheme === 'light') {
            html.setAttribute('data-bs-theme', 'dark');
            themeIcon.className = 'fas fa-moon';
            localStorage.setItem('theme', 'dark');
        } else {
            html.setAttribute('data-bs-theme', 'light');
            themeIcon.className = 'fas fa-sun';
            localStorage.setItem('theme', 'light');
        }
    }

    // Load saved theme on page load
    document.addEventListener('DOMContentLoaded', function() {
        const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        const html = document.documentElement;
        const themeIcon = document.getElementById('theme-icon');
        
        html.setAttribute('data-bs-theme', savedTheme);
        themeIcon.className = savedTheme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
    });

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    /* ----------------
       Helpers.
    */

    function titleToURLFriendlyFormat(title) {
        return title.toLowerCase()
            .replace(/[^a-z0-9\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-');
    }

    /* ----------------
       API.
    */

    function apiGetPublicItemPathAvatar() {
        return "/avatar.png";
    }

    function apiGetPublicItemPathCV() {
        return "/cv.pdf";
    }

    async function apiGetBlogMetadata() {
        try {
            const response = await fetch('/blog_api/posts');

            if (!response.ok) {
                throw new Error('Failed to fetch blog posts');
            }

            const metadata = await response.json();

            // Transform API response to match frontend format
            return metadata.map(post => ({
                title: post.title,
                description: post.description,
                created_at: post.createdAt,
                modified_at: post.modifiedAt,
                tags: post.tags
            }));
        } catch (error) {
            console.error('Error loading blog posts:', error);
            return [];
        }        
    }



